
!=======================================================================
! Author: Fabrice Roy (LUTH/CNRS/Observatoire de Paris)
! Fabrice.Roy@obspm.fr
!=======================================================================

! Wrappers for HDF5 serial and MPI I/O functions

Module modhdf5

  Use modmpicom
  Use hdf5
  Use iso_c_binding

  Implicit None


  !> Arguments for the subroutines are:
  !! Integer(hid_t) :: id is the HDF5 identifier of the file or group you want to write into
  !! Character(len=16) :: name is the name of the dataset or attribute
  !! Integer(kind=4) :: n1 is the first dimension of the array if data is an array
  !! Integer(kind=4) :: n2 is the second dimension of the array if data is an array
  !! data may be Character of any length, Integer or Real, kind=4 or 8, dimension(1) for 1D or dimension(2) for 2D
 
  Interface hdf5_write_attr
     Module Procedure hdf5_write_int4_attr0D   ! (id, name, data)
     Module Procedure hdf5_write_int4_attr1D   ! (id, name, n1, data)
     Module Procedure hdf5_write_int4_attr2D   ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_real4_attr0D  ! (id, name, data)
     Module Procedure hdf5_write_real4_attr1D  ! (id, name, n1, data)
     Module Procedure hdf5_write_real4_attr2D  ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_real8_attr0D  ! (id, name, data)
     Module Procedure hdf5_write_real8_attr1D  ! (id, name, n1, data)
     Module Procedure hdf5_write_real8_attr2D  ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_char_attr     ! (id, name, data)
  End Interface hdf5_write_attr

  Interface hdf5_write_data
     Module Procedure hdf5_write_int4_1D       ! (id, name, n1, data)
     Module Procedure hdf5_write_int4_2D       ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_int8_1D       ! (id, name, n1, data)
     Module Procedure hdf5_write_int8_2D       ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_real4_1D      ! (id, name, n1, data)
     Module Procedure hdf5_write_real4_2D      ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_real8_1D      ! (id, name, n1, data)
     Module Procedure hdf5_write_real8_2D      ! (id, name, n1, n2, data)
  End Interface hdf5_write_data

  Interface hdf5_read_data
     Module Procedure hdf5_read_int4_1D        ! (id, name, n1, data)
     Module Procedure hdf5_read_int4_2D        ! (id, name, n1, n2, data)
     Module Procedure hdf5_read_int8_1D        ! (id, name, n1, data)
     Module Procedure hdf5_read_int8_2D        ! (id, name, n1, n2, data)
     Module Procedure hdf5_read_real4_1D       ! (id, name, n1, data)
     Module Procedure hdf5_read_real4_2D       ! (id, name, n1, n2, data)
     Module Procedure hdf5_read_real8_1D       ! (id, name, n1, data)
     Module Procedure hdf5_read_real8_2D       ! (id, name, n1, n2, data)
  End Interface hdf5_read_data

  Interface hdf5_write_mpi_data
     Module Procedure hdf5_write_mpi_int4_1D       ! (id, name, n1, data)
     Module Procedure hdf5_write_mpi_int4_2D       ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_mpi_int8_1D       ! (id, name, n1, data)
     Module Procedure hdf5_write_mpi_int8_2D       ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_mpi_real4_1D      ! (id, name, n1, data)
     Module Procedure hdf5_write_mpi_real4_2D      ! (id, name, n1, n2, data)
     Module Procedure hdf5_write_mpi_real8_1D      ! (id, name, n1, data)
     Module Procedure hdf5_write_mpi_real8_2D      ! (id, name, n1, n2, data)
  End Interface hdf5_write_mpi_data

Contains


  !===============================================!
  !         FILE MANAGEMENT ROUTINES
  !===============================================!


  !=======================================================================
  !> Open a 'parallel' file shared by the communicator comm
  Subroutine hdf5_open_mpi_file(filename, comm, file_id)

    Implicit None

    Character(len=85), intent(in) :: filename           !< File name
    Integer, intent(in) :: comm                         !< MPI communicator used for the file access
    Integer(hid_t), intent(out) :: file_id              !< Parallel file identifier 

    Integer(hid_t) :: plist_id                          !< Property list identifier for parallel file
    Integer :: h5err                                    !< Error code
    
    ! Properties of the file
    Call h5pcreate_f(H5P_FILE_ACCESS_F, plist_id, h5err)
    Call h5pset_fapl_mpio_f(plist_id, comm, Mpi_Info_Null, h5err)

    ! open the file 
    Call h5fopen_f(filename, H5F_ACC_RDONLY_F, file_id, h5err, access_prp = plist_id)

    If(h5err /= 0) Then
       Print *,'Error opening file ',trim(filename), ' on process ', procID
       Call Mpi_Abort(Mpi_Comm_World, h5err, mpierr)
    End If

    Call h5pclose_f(plist_id, h5err)

  End Subroutine hdf5_open_mpi_file


  !=======================================================================
  ! Create and open a 'parallel' file shared by the communicator comm
  Subroutine hdf5_create_mpi_file(filename, comm, file_id)

    Character(len=85), intent(in) :: filename           ! File name
    Integer, intent(in) :: comm                         ! MPI communicator used for the file access
    Integer(hid_t), intent(out) :: file_id              ! Parallel file identifier 

    Integer :: h5err                                    ! Error code
    Integer :: rank                                     ! Nb of dimensions for the attributes
    Integer(size_t) :: alen                             ! Attribute length in bytes
    Integer(hsize_t), dimension(1) :: adims             ! Dimensions of the attributes
    Integer(hid_t) :: plist_id                          ! Property list identifier for parallel file
    Integer(hid_t) :: aspace_id                         ! Attribute dataspace identifier
    Integer(hid_t) :: attr_id                           ! Attribute identifier
    Integer(hid_t) :: atype_id                          ! Attribute datatype identifier
    Integer(hid_t) :: gr_root_id                        ! Root group identifier
    Character(len=20) :: aname                          ! Attribute name
    Character(len=8) :: simdate
    Character(len=10) :: simtime


    ! Properties of the file
    Call h5pcreate_f(H5P_FILE_ACCESS_F, plist_id, h5err)
    Call h5pset_fapl_mpio_f(plist_id, comm, Mpi_Info_Null, h5err)

    ! Creation of the file 
    Call h5fcreate_f(filename, H5F_ACC_TRUNC_F, file_id, h5err, access_prp = plist_id)
    Call h5pclose_f(plist_id, h5err)

    ! Open the '/' group to add some info as attributes
    Call h5gopen_f(file_id, "/", gr_root_id, h5err)

    rank = 1
    adims(1) = 1

    ! Get date and time
    Call date_and_time(date=simdate,time=simtime)

    alen = len(simdate)

    ! Write date as attribute
    Call h5tcopy_f(H5T_NATIVE_CHARACTER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5screate_f(H5S_SCALAR_F, aspace_id, h5err)
    aname = 'date'
    Call h5acreate_f(gr_root_id, aname, atype_id, aspace_id, attr_id, h5err)
    Call h5awrite_f(attr_id, atype_id, simdate, adims, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

    alen = len(simtime)

    ! Write time as attribute
    Call h5tcopy_f(H5T_NATIVE_CHARACTER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5screate_f(H5S_SCALAR_F, aspace_id, h5err)
    aname = 'time'
    Call h5acreate_f(gr_root_id, aname, atype_id, aspace_id, attr_id, h5err)
    Call h5awrite_f(attr_id, atype_id, simtime, adims, h5err)
    Call h5aclose_f(attr_id, h5err)      
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

    ! Close the group.
    Call h5gclose_f(gr_root_id, h5err)

  End Subroutine hdf5_create_mpi_file


  !=======================================================================
  ! Close a parallel file
  Subroutine hdf5_close_mpi_file(file_id)

    Integer(hid_t), intent(in) :: file_id              ! Parallel file identifier 

    Integer :: h5err                                   ! Error code

    ! Terminate access to the file.
    Call h5fclose_f(file_id, h5err)

  End Subroutine hdf5_close_mpi_file


  !=======================================================================
  ! Create and open a h5 file
  Subroutine hdf5_create_file(filename, file_id)

    Character(len=85), intent(in) :: filename           ! File name
    Integer(hid_t), intent(out) :: file_id              ! File identifier 

    Integer :: h5err                                    ! Error code
    Integer :: rank                                     ! Nb of dimensions for the attributes
    Integer(size_t) :: alen                             ! Attribute length in bytes
    Integer(hsize_t), dimension(1) :: adims             ! Dimensions of the attributes
    Integer(hid_t) :: aspace_id                         ! Attribute dataspace identifier
    Integer(hid_t) :: attr_id                           ! Attribute identifier
    Integer(hid_t) :: atype_id                          ! Attribute datatype identifier
    Integer(hid_t) :: gr_root_id                        ! Root group identifier
    Character(len=20) :: aname                          ! Attribute name
    Character(len=8) :: simdate
    Character(len=10) :: simtime
    Character(len=30) :: adata


    ! Create a new file using default properties.
    Call h5fcreate_f(filename, H5F_ACC_TRUNC_F, file_id, h5err)

    ! Open the '/' group to add some info as attributes
    Call h5gopen_f(file_id, "/", gr_root_id, h5err)

    rank = 1
    adims(1) = 1

    ! Get date and time
    Call date_and_time(date=simdate,time=simtime)

    alen = len(simdate)

    ! Write date as attribute
    Call h5tcopy_f(H5T_NATIVE_CHARACTER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5screate_f(H5S_SCALAR_F, aspace_id, h5err)
    aname = 'date'
    Call h5acreate_f(gr_root_id, aname, atype_id, aspace_id, attr_id, h5err)
    Call h5awrite_f(attr_id, atype_id, simdate, adims, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

    alen = len(simtime)

    ! Write time as attribute
    Call h5tcopy_f(H5T_NATIVE_CHARACTER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5screate_f(H5S_SCALAR_F, aspace_id, h5err)
    aname = 'time'
    Call h5acreate_f(gr_root_id, aname, atype_id, aspace_id, attr_id, h5err)
    Call h5awrite_f(attr_id, atype_id, simtime, adims, h5err)
    Call h5aclose_f(attr_id, h5err)      
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

    ! Write origin as attribute    
    alen = 30
    Call h5tcopy_f(H5T_NATIVE_CHARACTER, atype_id, h5err)
    Call h5tset_size_f(atype_id,alen, h5err)
    Call h5screate_f(H5S_SCALAR_F, aspace_id, h5err)
    aname = 'Origin'
    adata = 'Created by Test'
    Call h5acreate_f(gr_root_id, aname, atype_id, aspace_id, attr_id, h5err)
    Call h5awrite_f(attr_id, atype_id, adata, adims, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)


    ! Close the group.
    Call h5gclose_f(gr_root_id, h5err)

  End Subroutine hdf5_create_file


  !=======================================================================
  ! Close a h5 file
  Subroutine hdf5_close_file(file_id)

    Integer(hid_t), intent(in) :: file_id              ! File identifier 

    Integer :: h5err                                   ! Error code


    ! Terminate access to the file.
    Call h5fclose_f(file_id, h5err)

  End Subroutine hdf5_close_file


  !===============================================!
  !         SERIAL DATA OUTPUT ROUTINES
  !===============================================!


  !=======================================================================
  ! Write a 1D integer(kind=4) array in a serial file
  Subroutine hdf5_write_int4_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1                        ! number of elements in the array
    Integer(kind=4), dimension(n1), intent(in), target :: data

    Integer, parameter :: rank = 1                   ! dimension of the array = 1
    Integer(hsize_t), dimension(1) :: dim1D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr1D                             ! pointer to the array


    h5_kind = h5kind_to_type(4,H5_INTEGER_KIND)
    ptr1D = C_LOC(data(1))
    dim1D(1) = n1
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim1D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr1D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_int4_1D


  !=======================================================================
  ! Write a 1D integer(kind=8) array in a serial file
  Subroutine hdf5_write_int8_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1                        ! number of elements in the array
    Integer(kind=8), dimension(n1), intent(in), target :: data

    Integer, parameter :: rank = 1                   ! dimension of the array = 1
    Integer(hsize_t), dimension(1) :: dim1D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr1D                             ! pointer to the array


    h5_kind = h5kind_to_type(8,H5_INTEGER_KIND)
    ptr1D = C_LOC(data(1))
    dim1D(1) = n1
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim1D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr1D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_int8_1D


  !=======================================================================
  ! Write a 2D integer(kind=4) array in a serial file
  Subroutine hdf5_write_int4_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1, n2                    ! number of elements in the array
    Integer(kind=4), dimension(n1,n2), intent(in), target :: data

    Integer, parameter :: rank = 2                   ! dimension of the array = 1
    Integer(hsize_t), dimension(2) :: dim2D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr2D                             ! pointer to the array


    h5_kind = h5kind_to_type(4,H5_INTEGER_KIND)
    ptr2D = C_LOC(data(1,1))
    dim2D(1) = n1
    dim2D(2) = n2
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim2D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr2D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_int4_2D


  !=======================================================================
  ! Write a 2D integer(kind=8) array in a serial file
  Subroutine hdf5_write_int8_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1, n2                    ! number of elements in the array
    Integer(kind=8), dimension(n1,n2), intent(in), target :: data

    Integer, parameter :: rank = 2                   ! dimension of the array = 1
    Integer(hsize_t), dimension(2) :: dim2D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr2D                             ! pointer to the array


    h5_kind = h5kind_to_type(8,H5_INTEGER_KIND)
    ptr2D = C_LOC(data(1,1))
    dim2D(1) = n1
    dim2D(2) = n2
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim2D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr2D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_int8_2D


  !=======================================================================
  ! Write a 1D real(kind=4) array in a serial file
  Subroutine hdf5_write_real4_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1                        ! number of elements in the array
    Real(kind=4), dimension(n1), intent(in), target :: data

    Integer, parameter :: rank = 1                   ! dimension of the array = 1
    Integer(hsize_t), dimension(1) :: dim1D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr1D                             ! pointer to the array


    h5_kind = h5kind_to_type(4,H5_REAL_KIND)
    ptr1D = C_LOC(data(1))
    dim1D(1) = n1
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim1D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr1D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_real4_1D


  !=======================================================================
  ! Write a 1D real(kind=8) array in a serial file
  Subroutine hdf5_write_real8_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1                        ! number of elements in the array
    Real(kind=8), dimension(n1), intent(in), target :: data

    Integer, parameter :: rank = 1                   ! dimension of the array = 1
    Integer(hsize_t), dimension(1) :: dim1D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr1D                             ! pointer to the array


    h5_kind = h5kind_to_type(8,H5_REAL_KIND)
    ptr1D = C_LOC(data(1))
    dim1D(1) = n1
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim1D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr1D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_real8_1D


  !=======================================================================
  ! Write a 2D real(kind=4) array in a serial file
  Subroutine hdf5_write_real4_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1, n2                    ! number of elements in the array
    Real(kind=4), dimension(n1,n2), intent(in), target :: data

    Integer, parameter :: rank = 2                   ! dimension of the array = 1
    Integer(hsize_t), dimension(2) :: dim2D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr2D                             ! pointer to the array


    h5_kind = h5kind_to_type(4,H5_REAL_KIND)
    ptr2D = C_LOC(data(1,1))
    dim2D(1) = n1
    dim2D(2) = n2
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim2D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr2D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_real4_2D


  !=======================================================================
  ! Write a 2D real(kind=8) array in a serial file
  Subroutine hdf5_write_real8_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                 ! id of the file/group where the dataset will be written
    Character(len=16), intent(in) :: name            ! name of the dataset
    Integer, intent(in) :: n1, n2                    ! number of elements in the array
    Real(kind=8), dimension(n1,n2), intent(in), target :: data

    Integer, parameter :: rank = 2                   ! dimension of the array = 1
    Integer(hsize_t), dimension(2) :: dim2D          ! number of elements = size
    Integer(hid_t) :: dset_id                        ! id of the dataset
    Integer(hid_t) :: dspace_id                      ! id of the dataspace
    Integer(hid_t) :: h5_kind                        ! HDF5 real type
    Integer :: h5err                                 ! error code
    Type(c_ptr) :: ptr2D                             ! pointer to the array


    h5_kind = h5kind_to_type(8,H5_REAL_KIND)
    ptr2D = C_LOC(data(1,1))
    dim2D(1) = n1
    dim2D(2) = n2
    ! Create the dataspace.
    Call h5screate_simple_f(rank, dim2D, dspace_id, h5err)

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    CALL h5dwrite_f(dset_id, h5_kind, ptr2D, h5err)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

  End Subroutine hdf5_write_real8_2D


  !===============================================!
  !           MPI DATA OUTPUT ROUTINES
  !===============================================!


  !=======================================================================
  ! Write a 2D integer array in a parallel file
  Subroutine hdf5_write_mpi_int2D(id, ptr2d, dim2D, kind_var, name, dspace_dims, offset)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Type(c_ptr), intent(in) :: ptr2D                           ! Pointer to the array
    Integer(hsize_t), dimension(2) :: dim2D                    ! Local dataset dimensions
    Integer, intent(in) :: kind_var                            ! Size of 1 element
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(hsize_t), dimension(2), intent(in) :: dspace_dims  ! Global dataspace dimensions
    Integer(hsize_t), dimension(2), intent(in) :: offset       ! Offset

    Integer, parameter :: rank = 2                             ! Number of dimensions = 2
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type


    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(kind_var,H5_INTEGER_KIND)

    ! Create the dataspace.
    Call h5screate_simple_f(rank, dspace_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, dim2D, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, dim2D, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr2D, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)

  End Subroutine hdf5_write_mpi_int2D


  !=======================================================================
  ! Write a 1D integer array in a parallel file
  Subroutine hdf5_write_mpi_int1D(id, ptr1d, dim1D, kind_var, name, dspace_dims, offset)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Type(c_ptr), intent(in) :: ptr1D                           ! Pointer to the array
    Integer(hsize_t), dimension(1) :: dim1D                    ! Local dataset dimensions
    Integer, intent(in) :: kind_var                            ! Size of 1 element
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(hsize_t), dimension(1), intent(in) :: dspace_dims  ! Global dataspace dimensions
    Integer(hsize_t), dimension(1), intent(in) :: offset       ! Offset

    Integer, parameter :: rank = 1                             ! Number of dimensions = 2
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type


    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(kind_var,H5_INTEGER_KIND)

    ! Create the dataspace.
    Call h5screate_simple_f(rank, dspace_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, dim1D, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, dim1D, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr1D, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)

  End Subroutine hdf5_write_mpi_int1D


  !=======================================================================
  ! Write a 1D integer(kind=4) array in a parallel file
  Subroutine hdf5_write_mpi_int4_1D(id, name, n1, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1                          ! Dimension of the local data
    Integer(kind=4), dimension(n1), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(1) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(1) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(1) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 1                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(4,H5_INTEGER_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n1, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = 0

    Do i = 1, nproc
       global_dims(1) = global_dims(1) + ntab(i)
    End Do
    
    local_dims(1) = n1
    
    offset(1) = 0
    
    Do i = 1, idproc
       offset(1) = offset(1) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_int4_1D


  !=======================================================================
  ! Write a 2D integer(kind=4) array in a parallel file
  ! The array is distributed along the 2nd dimension
  Subroutine hdf5_write_mpi_int4_2D(id, name, n1, n2, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1, n2                      ! Dimensions of the local data
    Integer(kind=4), dimension(n1,n2), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(2) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(2) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(2) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 2                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1,1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(4,H5_INTEGER_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n2, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = n1
    global_dims(2) = 0

    Do i = 1, nproc
       global_dims(2) = global_dims(2) + ntab(i)
    End Do
    
    local_dims(1) = n1
    local_dims(2) = n2

    offset(1) = 0
    offset(2) = 0
    
    Do i = 1, idproc
       offset(2) = offset(2) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_int4_2D


  !=======================================================================
  ! Write a 1D integer(kind=8) array in a parallel file
  Subroutine hdf5_write_mpi_int8_1D(id, name, n1, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1                          ! Dimension of the local data
    Integer(kind=8), dimension(n1), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(1) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(1) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(1) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 1                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(8,H5_INTEGER_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n1, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = 0

    Do i = 1, nproc
       global_dims(1) = global_dims(1) + ntab(i)
    End Do
    
    local_dims(1) = n1
    
    offset(1) = 0
    
    Do i = 1, idproc
       offset(1) = offset(1) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_int8_1D


  !=======================================================================
  ! Write a 2D integer(kind=8) array in a parallel file
  ! The array is distributed along the 2nd dimension
  Subroutine hdf5_write_mpi_int8_2D(id, name, n1, n2, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1, n2                      ! Dimension of the local data
    Integer(kind=8), dimension(n1,n2), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(2) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(2) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(2) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 2                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1,1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(8,H5_INTEGER_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n2, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = n1
    global_dims(2) = 0

    Do i = 1, nproc
       global_dims(2) = global_dims(2) + ntab(i)
    End Do
    
    local_dims(1) = n1
    local_dims(2) = n2
    
    offset(1) = 0
    offset(2) = 0
    
    Do i = 1, idproc
       offset(2) = offset(2) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_int8_2D


  !=======================================================================
  ! Write a 1D real(kind=4) array in a parallel file
  Subroutine hdf5_write_mpi_real4_1D(id, name, n1, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1                          ! Dimension of the local data
    Real(kind=4), dimension(n1), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(1) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(1) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(1) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 1                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(4,H5_REAL_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n1, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = 0

    Do i = 1, nproc
       global_dims(1) = global_dims(1) + ntab(i)
    End Do
    
    local_dims(1) = n1
    
    offset(1) = 0
    
    Do i = 1, idproc
       offset(1) = offset(1) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_real4_1D


  !=======================================================================
  ! Write a 2D real(kind=4) array in a parallel file
  ! The array is distributed along the 2nd dimension
  Subroutine hdf5_write_mpi_real4_2D(id, name, n1, n2, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1, n2                      ! Dimensions of the local data
    Real(kind=4), dimension(n1,n2), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(2) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(2) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(2) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 2                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1,1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(4,H5_REAL_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n2, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = n1
    global_dims(2) = 0

    Do i = 1, nproc
       global_dims(2) = global_dims(2) + ntab(i)
    End Do
    
    local_dims(1) = n1
    local_dims(2) = n2

    offset(1) = 0
    offset(2) = 0
    
    Do i = 1, idproc
       offset(2) = offset(2) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_real4_2D


  !=======================================================================
  ! Write a 1D real(kind=8) array in a parallel file
  Subroutine hdf5_write_mpi_real8_1D(id, name, n1, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1                          ! Dimension of the local data
    Real(kind=8), dimension(n1), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(1) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(1) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(1) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 1                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(8,H5_REAL_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n1, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = 0

    Do i = 1, nproc
       global_dims(1) = global_dims(1) + ntab(i)
    End Do
    
    local_dims(1) = n1
    
    offset(1) = 0
    
    Do i = 1, idproc
       offset(1) = offset(1) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_real8_1D


  !=======================================================================
  ! Write a 2D real(kind=8) array in a parallel file
  ! The array is distributed along the 2nd dimension
  Subroutine hdf5_write_mpi_real8_2D(id, name, n1, n2, data, comm)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(kind=4), intent(in) :: n1, n2                      ! Dimension of the local data
    Real(kind=8), dimension(n1,n2), intent(in), target :: data ! Local array
    Integer(kind=4), intent(in) :: comm                        ! MPI communicator used

    Integer(hsize_t), dimension(2) :: local_dims               ! Local dataset dimensions
    Integer(hsize_t), dimension(2) :: global_dims              ! Global dataspace dimensions
    Integer(hsize_t), dimension(2) :: offset                   ! Offset
    Type(c_ptr) :: ptr                                         ! Pointer to the array
    Integer, parameter :: rank = 2                             ! Number of dimensions = 1
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 integer type
    Integer(kind=4), dimension(:), allocatable :: ntab         ! tmp tab used for global dims and offset calculation
    Integer(kind=4) :: i
    Integer(kind=4) :: nproc, idproc

    Call Mpi_Comm_Size(comm, nproc, mpierr)
    Call Mpi_Comm_Rank(comm, idproc, mpierr)

    ptr = C_LOC(data(1,1))
    
    Allocate(ntab(nproc))

    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(8,H5_REAL_KIND)

    ! Offset and global dimensions have to be computed
    Call Mpi_Allgather(n2, 1, Mpi_Integer, ntab, 1, Mpi_Integer, comm, mpierr)

    global_dims(1) = n1
    global_dims(2) = 0

    Do i = 1, nproc
       global_dims(2) = global_dims(2) + ntab(i)
    End Do
    
    local_dims(1) = n1
    local_dims(2) = n2
    
    offset(1) = 0
    offset(2) = 0
    
    Do i = 1, idproc
       offset(2) = offset(2) + ntab(i)
    End Do

    ! Create the dataspace.
    Call h5screate_simple_f(rank, global_dims, dspace_id, h5err)      

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, local_dims, mem_id, h5err)

    Call h5dget_space_f(dset_id, dspace_id, h5err)
    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, local_dims, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    Call h5dwrite_f(dset_id, h5_kind, ptr, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    
    Deallocate(ntab)

  End Subroutine hdf5_write_mpi_real8_2D


  !=======================================================================
  ! Write a 2D real array in a parallel file    
  Subroutine hdf5_write_mpi_real2D(id, ptr2d, dim2D, kind_var, name, dspace_dims, offset)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Type(c_ptr), intent(in) :: ptr2D                           ! Pointer to the array
    Integer(hsize_t), dimension(2) :: dim2D                    ! Local dataset dimensions
    Integer, intent(in) :: kind_var                            ! Size of 1 element
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(hsize_t), dimension(2), intent(in) :: dspace_dims  ! Global dataspace dimensions
    Integer(hsize_t), dimension(2), intent(in) :: offset       ! Offset

    Integer, parameter :: rank = 2                             ! Number of dimensions = 1
    Integer(hid_t) :: plist_id                                 ! Property list identifier for parallel file
    Integer(hid_t) :: dset_id                                  ! Dataset identifier
    Integer(hid_t) :: dspace_id                                ! Dataspace identifier
    Integer(hid_t) :: mem_id                                   ! Local memory dataspace identifier for parallel I/O
    Integer :: h5err                                           ! Error code
    Integer(hid_t) :: h5_kind                                  ! HDF5 real type
    Integer :: mpierr


    ! Creation du type hdf5 correspondant au type des donnees a ecrire
    h5_kind = h5kind_to_type(kind_var,H5_REAL_KIND)

    ! Create the dataspace.
    Call h5screate_simple_f(rank, dspace_dims, dspace_id, h5err)

    If(h5err/=0) Then
       Print *,'Erreur dans h5screate_simple_f dspace_id'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    ! Create the dataset with default properties.
    Call h5dcreate_f(id, name, h5_kind, dspace_id, &
         dset_id, h5err)

    If(h5err/=0) Then
       Print *,'Erreur dans h5dcreate_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    ! Create the local memory dataspace
    Call h5screate_simple_f(rank, dim2D, mem_id, h5err)

    If(h5err/=0) Then
       Print *,'Erreur dans h5screate_simple_f mem_id'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    Call h5dget_space_f(dset_id, dspace_id, h5err)

    If(h5err/=0) Then
       Print *,'Erreur dans h5dget_space_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, dim2D, h5err)

    If(h5err/=0) Then
       Print *,'Erreur dans h5sselect_hyperslab_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    If(h5err/=0) Then
       Print *,'Erreur dans h5pcreate_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    If(h5err/=0) Then
       Print *,'Erreur dans h5pset_dxpl_mpio_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    Call h5dwrite_f(dset_id, h5_kind, ptr2D, h5err, &
         file_space_id = dspace_id, mem_space_id = mem_id, xfer_prp = plist_id)
    If(h5err/=0) Then
       Print *,'Erreur dans h5dwrite_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    ! End access to the dataset and release resources used by it.
    Call h5dclose_f(dset_id, h5err)
    If(h5err/=0) Then
       Print *,'Erreur dans h5dclose_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    ! Terminate access to the data space.
    Call h5sclose_f(dspace_id, h5err)
    If(h5err/=0) Then
       Print *,'Erreur dans h5sclose_f dspace_id'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    ! Terminate access to the property list.
    Call h5pclose_f(plist_id, h5err)
    If(h5err/=0) Then
       Print *,'Erreur dans h5pclose_f'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

    ! End access to the local memory dataspace
    Call h5sclose_f(mem_id, h5err)
    If(h5err/=0) Then
       Print *,'Erreur dans h5sclose_f mem_id'
       Call Mpi_abort(Mpi_Comm_World,2,mpierr)
    End If

  End Subroutine hdf5_write_mpi_real2D


  !===============================================!
  !         SERIAL DATA INPUT ROUTINES
  !===============================================!


  !=======================================================================
  ! Read a 1-D integer(kind=4) array from a serial file
  Subroutine hdf5_read_int4_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1                       ! dimension of the array to read 
    Integer(kind=4), dimension(n1), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(4,H5_INTEGER_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_int4_1D


  !=======================================================================
  ! Read a 1-D integer(kind=8) array from a serial file
  Subroutine hdf5_read_int8_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1                       ! dimension of the array to read 
    Integer(kind=8), dimension(n1), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(8,H5_INTEGER_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_int8_1D


  !=======================================================================
  ! Read a 2-D integer(kind=4) array from a serial file
  Subroutine hdf5_read_int4_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1, n2                   ! dimensions of the array to read 
    Integer(kind=4), dimension(n1,n2), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1,1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(4,H5_INTEGER_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_int4_2D


  !=======================================================================
  ! Read a 2-D integer(kind=8) array from a serial file
  Subroutine hdf5_read_int8_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1, n2                   ! dimensions of the array to read 
    Integer(kind=8), dimension(n1,n2), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1,1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(8,H5_INTEGER_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_int8_2D


  !=======================================================================
  ! Read a 1-D real(kind=4) array from a serial file
  Subroutine hdf5_read_real4_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1                       ! dimension of the array to read 
    Real(kind=4), dimension(n1), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(4,H5_REAL_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_real4_1D


  !=======================================================================
  ! Read a 1-D real(kind=8) array from a serial file
  Subroutine hdf5_read_real8_1D(id, name, n1, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1                       ! dimension of the array to read 
    Real(kind=8), dimension(n1), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(8,H5_REAL_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_real8_1D


  !=======================================================================
  ! Read a 2-D real(kind=4) array from a serial file
  Subroutine hdf5_read_real4_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1, n2                   ! dimensions of the array to read 
    Real(kind=4), dimension(n1,n2), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1,1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(4,H5_REAL_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_real4_2D


  !=======================================================================
  ! Read a 2-D real(kind=8) array from a serial file
  Subroutine hdf5_read_real8_2D(id, name, n1, n2, data)

    Integer(hid_t), intent(in) :: id                        ! id of the file/group where the dataset will be read
    Character(len=16), intent(in) :: name                   ! name of the dataset
    Integer(kind=4), intent(in) :: n1, n2                   ! dimensions of the array to read 
    Real(kind=8), dimension(n1,n2), intent(inout), target :: data   ! array

    Type(c_ptr) :: ptr
    Integer(hid_t) :: dset_id                               ! id of the dataset
    Integer(hid_t) :: h5_kind                               ! HDF5 integer type
    Integer :: h5err                                        ! error code


    ptr = C_LOC(data(1,1))
    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(8,H5_REAL_KIND)

    ! open the dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    
    ! read the dataset
    Call h5dread_f(dset_id, h5_kind, ptr, h5err)

    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_real8_2D


  !===============================================!
  !         MPI DATA INPUT ROUTINES
  !===============================================!


  !=======================================================================
  ! Read a 2-D real array from a serial file
  Subroutine hdf5_read_mpi_real2D(id, ptr2D, dim2D, kind_var, name, offset)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Type(c_ptr), intent(inout) :: ptr2D                        ! Pointer to the array
    Integer(hsize_t), dimension(2), intent(in) :: dim2D        ! Local dataset dimensions
    Integer, intent(in) :: kind_var                            ! Size of 1 element
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(hsize_t), dimension(2), intent(in) :: offset       ! Global dataspace dimensions

    Integer(hid_t) :: dset_id                                  ! id of the dataset
    Integer(hid_t) :: plist_id                                 ! id of the dataset
    Integer(hid_t) :: dspace_id                                ! id of the dataspace
    Integer(hid_t) :: mem_id                                   ! id of the dataspace
    Integer(hid_t) :: h5_kind                                  ! HDF5 real type
    Integer :: h5err                                           ! error code


    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(kind_var,H5_REAL_KIND)

    ! create memory dataspace
    Call h5screate_simple_f(2, dim2D, mem_id, h5err)
    ! open dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    ! read the file dataspace
    Call h5dget_space_f(dset_id, dspace_id, h5err)

    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, dim2D, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    ! read the dataset
    Call h5dread_f(dset_id,h5_kind,ptr2D,h5err,&
         mem_space_id=mem_id,file_space_id=dspace_id,xfer_prp=plist_id)
    
    Call h5pclose_f(plist_id, h5err)
    ! close the file dataspace
    Call h5sclose_f(dspace_id, h5err)
    ! close the dataset
    Call h5sclose_f(mem_id, h5err)
    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_mpi_real2D



  !=======================================================================
  ! Read a 1-D integer array from a serial file
  Subroutine hdf5_read_mpi_int1D(id, ptr1D, dim1D, kind_var, name, offset)

    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Type(c_ptr), intent(inout) :: ptr1D                        ! Pointer to the array
    Integer(hsize_t), dimension(1), intent(in) :: dim1D        ! Local dataset dimensions
    Integer, intent(in) :: kind_var                            ! Size of 1 element
    Character(len=16), intent(in) :: name                      ! Dataset name
    Integer(hsize_t), dimension(1), intent(in) :: offset       ! Global dataspace dimensions

    Integer(hid_t) :: dset_id                                  ! id of the dataset
    Integer(hid_t) :: plist_id                                 ! id of the dataset
    Integer(hid_t) :: dspace_id                                ! id of the dataspace
    Integer(hid_t) :: mem_id                                   ! id of the dataspace
    Integer(hid_t) :: h5_kind                                  ! HDF5 real type
    Integer :: h5err                                           ! error code


    ! hdf5 type corresponding to the integer type to read
    h5_kind = h5kind_to_type(kind_var,H5_INTEGER_KIND)

    ! create memory dataspace
    Call h5screate_simple_f(1, dim1D, mem_id, h5err)
    ! open dataset
    Call h5dopen_f(id, name, dset_id, h5err)
    ! read the file dataspace
    Call h5dget_space_f(dset_id, dspace_id, h5err)

    Call h5sselect_hyperslab_f(dspace_id, H5S_SELECT_SET_F, offset, dim1D, h5err)

    ! Create property list for collective dataset write
    Call h5pcreate_f(H5P_DATASET_XFER_F, plist_id, h5err) 
    Call h5pset_dxpl_mpio_f(plist_id, H5FD_MPIO_COLLECTIVE_F, h5err)

    ! read the dataset
    Call h5dread_f(dset_id,h5_kind,ptr1D,h5err,&
         mem_space_id=mem_id,file_space_id=dspace_id,xfer_prp=plist_id)
    
    Call h5pclose_f(plist_id, h5err)
    ! close the file dataspace
    Call h5sclose_f(dspace_id, h5err)
    ! close the dataset
    Call h5sclose_f(mem_id, h5err)
    ! close the dataset
    Call h5dclose_f(dset_id, h5err)

  End Subroutine hdf5_read_mpi_int1D


  !===============================================!
  !       SERIAL ATTRIBUTE OUTPUT ROUTINES
  !===============================================!


  !=======================================================================
  ! Write an integer4 as attribute
  Subroutine hdf5_write_int4_attr0D(id, name, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Integer(kind=4), intent(in) :: data                        ! Attribute value(s)

    Integer(hsize_t), dimension(1) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = 1
    rank = 1
    ! Create scalar data space for the attribute.
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    ! Create datatype for the attribute.
    alen = 4
    Call h5tcopy_f(H5T_NATIVE_INTEGER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    ! Create dataset attribute.
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    ! Write the attribute data.
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    ! Close the attribute.
    Call h5aclose_f(attr_id, h5err)
    ! Terminate access to the data space.
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_int4_attr0D


  !=======================================================================
  ! Write an array of integer4 as attribute
  Subroutine hdf5_write_int4_attr1D(id, name, n1, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Integer(kind=4), intent(in) :: n1                          ! dimension of the data to write
    Integer(kind=4), dimension(n1), intent(in) :: data         ! Attribute value(s)

    Integer(hsize_t), dimension(1) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = n1
    rank = 1
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 4
    Call h5tcopy_f(H5T_NATIVE_INTEGER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_int4_attr1D


  !=======================================================================
  ! Write a 2-D array of integer4 as attribute
  Subroutine hdf5_write_int4_attr2D(id, name, n1, n2, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Integer(kind=4), intent(in) :: n1, n2                      ! dimension of the data to write
    Integer(kind=4), dimension(n1,n2), intent(in) :: data      ! Attribute value(s)

    Integer(hsize_t), dimension(2) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = n1
    dim(2) = n2
    rank = 2
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 4
    Call h5tcopy_f(H5T_NATIVE_INTEGER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_int4_attr2D

  !=======================================================================
  ! Write a real4 as attribute
  Subroutine hdf5_write_real4_attr0D(id, name, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Real(kind=4), intent(in) :: data                           ! Attribute value(s)

    Integer(hsize_t), dimension(1) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = 1
    rank = 1
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 4
    Call h5tcopy_f(H5T_NATIVE_REAL, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_real4_attr0D


  !=======================================================================
  ! Write an array of real4 as attribute
  Subroutine hdf5_write_real4_attr1D(id, name, n1, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Integer(kind=4), intent(in) :: n1                          ! dimension of the data to write
    Real(kind=4), dimension(n1), intent(in) :: data            ! Attribute value(s)

    Integer(hsize_t), dimension(1) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = n1
    rank = 1
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 4
    Call h5tcopy_f(H5T_NATIVE_REAL, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_real4_attr1D


  !=======================================================================
  ! Write a 2-D array of real4 as attribute
  Subroutine hdf5_write_real4_attr2D(id, name, n1, n2, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Integer(kind=4), intent(in) :: n1, n2                      ! dimension of the data to write
    Real(kind=4), dimension(n1,n2), intent(in) :: data         ! Attribute value(s)

    Integer(hsize_t), dimension(2) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = n1
    dim(2) = n2
    rank = 2
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 4
    Call h5tcopy_f(H5T_NATIVE_REAL, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_real4_attr2D


  !=======================================================================
  ! Write a real8 as attribute
  Subroutine hdf5_write_real8_attr0D(id, name, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Real(kind=8), intent(in) :: data                           ! Attribute value(s)

    Integer(hsize_t), dimension(1) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = 1
    rank = 1
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 8
    Call h5tcopy_f(H5T_NATIVE_DOUBLE, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_real8_attr0D


  !=======================================================================
  ! Write an array of real8 as attribute
  Subroutine hdf5_write_real8_attr1D(id, name, n1, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Integer(kind=4), intent(in) :: n1                          ! dimension of the data to write
    Real(kind=8), dimension(n1), intent(in) :: data            ! Attribute value(s)

    Integer(hsize_t), dimension(1) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = n1
    rank = 1
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 8
    Call h5tcopy_f(H5T_NATIVE_DOUBLE, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_real8_attr1D


  !=======================================================================
  ! Write a 2-D array of real8 as attribute
  Subroutine hdf5_write_real8_attr2D(id, name, n1, n2, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Integer(kind=4), intent(in) :: n1, n2                      ! dimension of the data to write
    Real(kind=8), dimension(n1,n2), intent(in) :: data         ! Attribute value(s)

    Integer(hsize_t), dimension(2) :: dim                      ! Local dataset dimensions
    Integer :: rank 
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = n1
    dim(2) = n2
    rank = 2
    Call h5screate_simple_f(rank, dim, aspace_id, h5err)

    alen = 8
    Call h5tcopy_f(H5T_NATIVE_DOUBLE, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)  
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_real8_attr2D


  !=======================================================================
  ! Write a character array as attribute
  Subroutine hdf5_write_char_attr(id, name, data)
    
    Integer(hid_t), intent(in) :: id                           ! File/group identifier
    Character(len=16), intent(in) :: name                      ! Name of the attribute
    Character(*), intent(in) :: data                           ! Attribute value

    Integer(hsize_t), dimension(1) :: dim                      ! Local dataset dimensions
    Integer(hid_t) :: aspace_id                                ! id of the dataspace
    Integer(hid_t) :: atype_id                                 ! id of the dataspace
    Integer(hid_t) :: attr_id                                  ! id of the dataspace
    Integer :: h5err                                           ! error code
    Integer(size_t) :: alen                                    ! Attribute length in bytes

    
    dim(1) = 1
    alen = len(data)
    Call h5tcopy_f(H5T_NATIVE_CHARACTER, atype_id, h5err)
    Call h5tset_size_f(atype_id, alen, h5err)
    Call h5screate_f(H5S_SCALAR_F, aspace_id, h5err)
    Call h5acreate_f(id, name, atype_id, aspace_id, attr_id, h5err)
    Call h5awrite_f(attr_id, atype_id, data, dim, h5err)
    Call h5aclose_f(attr_id, h5err)
    Call h5sclose_f(aspace_id, h5err)
    Call h5tclose_f(atype_id, h5err)

  End Subroutine hdf5_write_char_attr

End Module modhdf5

