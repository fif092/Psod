Module modfofmpi

  Use modconstant, only : PRI

  Implicit none

  Integer(kind=1), dimension(:), allocatable :: border
  Real(kind=4), dimension(:,:), allocatable :: posAva,posArr,posBas,posDro,posGau,posHau
  Integer(kind=PRI), dimension(:), allocatable :: strAva,strArr,strBas,strDro,strGau,strHau,strRec
  Integer(kind=4) :: nbridgearr, nbridgeava, nbridgegau
  Integer(kind=4) :: nbridgedro, nbridgebas, nbridgehau
  Integer(kind=PRI), dimension(:,:), allocatable :: bridgeArr, bridgeAva, bridgeGau
  Integer(kind=PRI), dimension(:,:), allocatable :: bridgeDro, bridgeBas, bridgeHau

Contains

  Subroutine initmerging(nflagloc)

    Use modio, only : mynpart
    Use modvariables, only : x, structure

    Implicit None

    Integer(kind=4), dimension(6), intent(in) :: nflagloc
    Integer(kind=4) :: debh, debb, deba, debr, debg, debd
    Integer(kind=4) :: i

    debh = 1
    debb = 1
    deba = 1
    debr = 1
    debg = 1
    debd = 1  

    If(nflagloc(1) /= 0) Allocate (posArr(3,nflagloc(1)), strArr(nflagloc(1)))
    If(nflagloc(2) /= 0) Allocate (posAva(3,nflagloc(2)), strAva(nflagloc(2)))
    If(nflagloc(3) /= 0) Allocate (posGau(3,nflagloc(3)), strGau(nflagloc(3)))
    If(nflagloc(4) /= 0) Allocate (posDro(3,nflagloc(4)), strDro(nflagloc(4)))
    If(nflagloc(5) /= 0) Allocate (posBas(3,nflagloc(5)), strBas(nflagloc(5)))
    If(nflagloc(6) /= 0) Allocate (posHau(3,nflagloc(6)), strHau(nflagloc(6)))

    ! loop over the particles
    ! if the particle is located near an edge, its position and its halo ID are saved in specific arrays
    bufferface : Do i = 1, mynpart
       bord : If(border(i) /= 0) Then
          haut : If(border(i) >= 32) Then
             posHau (:,debh) = x(:,i)
             strHau (debh) = structure(i)
             debh = debh+1
             border(i) = border(i) - 32_1
          End If haut
          bas : If(border(i) >= 16) Then
             posBas (:,debb) = x(:,i)
             strBas (debb) = structure(i)
             debb = debb+1
             border(i) = border(i) - 16_1
          End If bas
          avant : If(border(i) >= 8) Then
             posAva (:,deba) = x(:,i)
             strAva (deba) = structure(i)
             deba = deba+1
             border(i) = border(i) - 8_1
          End If avant
          arriere : If(border(i) >=4 ) Then
             posArr (:,debr) = x(:,i)
             strArr (debr) = structure(i)
             debr = debr+1
             border(i) = border(i) - 4_1
          End If arriere
          droite : If(border(i) >=2 ) Then
             posDro (:,debd) = x(:,i)
             strDro (debd) = structure(i)
             debd = debd+1
             border(i) = border(i) - 2_1
          End If droite
          gauche : If(border(i) >= 1) Then
             posGau (:,debg) = x(:,i)
             strGau (debg) = structure(i)
             debg = debg+1
          End If gauche
       End If bord

    End Do bufferface


    Deallocate(border)

  End Subroutine initmerging


  !-----------------------------------------------------------------------------------------------
  !> Finds the pairs of particles that should be linked through the merging procedure. <br>
  !! two directions are considered simultaneously by the local process: <br>
  !! 1= back  2= front <br>
  !! 1= left  2= right <br>
  !! 1= bottom  2= top <br>
  !! meaning that the local process exchanges information with the processes located in these two directions.
  Subroutine findbridge(nloc, nrecv, pos1, pos2, nbridge1, bridge1, nbridge2, bridge2, r2, v1, v2)

    Use modmpicom
    Use modconstant
    Implicit None
    ! input
    Integer(kind=4), intent(in), dimension(6) :: nloc   !< local number of particles flagged for link detection in direction 1
    Integer(kind=4), intent(in), dimension(6) :: nrecv  !< local number of particles flagged for link detection in direction 2
    Integer(kind=4), intent(in) :: v1                   !< neighbour index in direction 1
    Integer(kind=4), intent(in) :: v2                   !< neighbour index in direction 2
    Real(kind=4), intent(in), dimension(3,*) :: pos1   !< positions of local particles flagged for link detection in direction 1
    Real(kind=4), intent(in), dimension(3,*) :: pos2   !< positions of distant particles flagged for link detection in direction 2
    Real(kind=4), intent(in) :: r2                     !< percolation length

    ! output
    Integer(kind=4), intent(inout) :: nbridge1                                !< number of "bridges" found, e.g. pairs of particles that should be linked, in direction 1
    Integer(kind=4), intent(inout) :: nbridge2                                !< number of "bridges" found, e.g. pairs of particles that should be linked, in direction 2
    Integer(kind=PRI), dimension(:,:), allocatable, intent(inout) :: bridge1  !< array of indices of the particles forming a bridge in direction 1
    Integer(kind=PRI), dimension(:,:), allocatable, intent(inout) :: bridge2  !< array of indices of the particles forming a bridge in direction 2

    ! local
    Integer(kind=4) :: mpistat(MPI_STATUS_SIZE)   ! MPI comm. status
    Integer(kind=4) :: li, ri, ind
    Real(kind=4) :: d, dx, dy, dz
    Real(kind=4), dimension(:,:), allocatable :: posRec


    ! Envoi vers l'avant, reception venant de l'arriere
    Allocate (posRec(3,nrecv(v1)))
    Call Mpi_Irecv(posRec,3*nrecv(v1),Mpi_Real,voisin(v1),voisin(v1),MPICube,mpireqr1,mpierr)
    Call Mpi_ISend(pos2,3*nloc(v2), Mpi_Real,voisin(v2),procID,MPICube,mpireqs1,mpierr)

    Call Mpi_Wait(mpireqs1,mpistat,mpierr)
    Call Mpi_Wait(mpireqr1,mpistat,mpierr)
    

    nbridge1 = 0
    Do li = 1, nloc(v1)
       Do ri = 1, nrecv(v1)
          dx = abs(pos1(1,li)-posRec(1,ri))
          dx = min(dx,1.0-dx)
          dy = abs(pos1(2,li)-posRec(2,ri))
          dy = min(dy,1.0-dy)
          dz = abs(pos1(3,li)-posRec(3,ri))
          dz = min(dz,1.0-dz)
          
          d  = dx*dx+dy*dy+dz*dz
          If(d <= r2 ) Then
             nbridge1 = nbridge1 + 1
          End If
       End Do
    End Do

    Allocate(bridge1(2,nbridge1))

    ind = 1
    Do li = 1, nloc(v1)
       Do ri = 1, nrecv(v1)
          dx = abs(pos1(1,li)-posRec(1,ri))
          dx = min(dx,1.0-dx)
          dy = abs(pos1(2,li)-posRec(2,ri))
          dy = min(dy,1.0-dy)
          dz = abs(pos1(3,li)-posRec(3,ri))
          dz = min(dz,1.0-dz)
          
          d  = dx*dx+dy*dy+dz*dz
          If(d <= r2 ) Then
             bridge1(1,ind) = li
             bridge1(2,ind) = ri
             ind = ind + 1
          End If
       End Do
    End Do

    Deallocate(posRec)


    ! Envoi vers l'arriere, reception venant de l'avant
    Allocate (posRec(3,nrecv(v2)))
    Call Mpi_Irecv(posRec,3*nrecv(v2),Mpi_Real,voisin(v2),voisin(v2),MPICube,mpireqr1,mpierr)
    Call Mpi_ISend(pos1,3*nloc(v1), Mpi_Real,voisin(v1),procID,MPICube,mpireqs1,mpierr)

    Call Mpi_Wait(mpireqs1,mpistat,mpierr)
    Call Mpi_Wait(mpireqr1,mpistat,mpierr)
    
    nbridge2 = 0
    Do li = 1, nloc(v2)
       Do ri = 1, nrecv(v2)
          dx = abs(pos2(1,li)-posRec(1,ri))
          dx = min(dx,1.0-dx)
          dy = abs(pos2(2,li)-posRec(2,ri))
          dy = min(dy,1.0-dy)
          dz = abs(pos2(3,li)-posRec(3,ri))
          dz = min(dz,1.0-dz)
          
          d  = dx*dx+dy*dy+dz*dz
          If(d <= r2 ) Then
             nbridge2 = nbridge2+1
          End If
       End Do
    End Do

    Allocate(bridge2(2,nbridge2))

    ind = 1
    Do li = 1, nloc(v2)
       Do ri = 1, nrecv(v2)
          dx = abs(pos2(1,li)-posRec(1,ri))
          dx = min(dx,1.0-dx)
          dy = abs(pos2(2,li)-posRec(2,ri))
          dy = min(dy,1.0-dy)
          dz = abs(pos2(3,li)-posRec(3,ri))
          dz = min(dz,1.0-dz)
          
          d  = dx*dx+dy*dy+dz*dz
          If(d <= r2 ) Then
             bridge2(1,ind) = li
             bridge2(2,ind) = ri
             ind = ind + 1
          End If
       End Do
    End Do

    Deallocate(posRec)


  End Subroutine findbridge

  !------------------------------------------------------------------------------------

  Subroutine mergehaloes(nflagloc, nflagrecv)

    Use modconstant
    Use modmpicom
    Use modvariables
    Use modio, only : mynpart

    Implicit none

    Integer(kind=4), dimension(6), intent(in) :: nflagloc
    Integer(kind=4), dimension(6), intent(in) :: nflagrecv

    Integer(kind=4) :: nbpassage
    Logical :: nopermut, finished
    Integer(kind=4) :: sendID, recvID
    Integer(kind=4) :: ib, k
    Integer(kind=PRI) :: il, ir
    Integer(kind=4) :: mpistat(MPI_STATUS_SIZE)   ! MPI comm. status


    nbpassage = 0

    If(procID==0) Print *,'Debut du raccordement'

    raccordement : Do
       nopermut = .true.
       nbpassage = nbpassage + 1
       If(ProcID == 0) Print *,'Passage numero',nbpassage

       !------------------------------------------------------!
       ! Envoi du bas vers le bas et reception venant du haut !
       !------------------------------------------------------!

       sendID = voisin(5)
       recvID = voisin(6)
      
       Allocate (strRec(nflagrecv(6)))

       Call Mpi_ISend(strBas,nflagloc(5), MPI_PRI,sendID,sendID,MPICube,mpireqs1,mpierr)
       Call Mpi_IRecv(strRec,nflagrecv(6),MPI_PRI,recvID,procID,MPICube,mpireqr1,mpierr)
       Call Mpi_Wait(mpireqs1,mpistat,mpierr)
       Call Mpi_Wait(mpireqr1,mpistat,mpierr)

       Do ib = 1, nbridgehau
          il = bridgeHau(1,ib)
          ir = bridgeHau(2,ib)
          raccordh : If(strRec(ir)< strHau(il) ) Then

             nopermut = .false.
             renumallh : Do k=1,mynpart
                If(structure(k) == strHau(il)) structure(k) = strRec(ir)
             End Do renumallh
             Do k=1, nflagloc(4)
                If(strDro(k) == strHau(il)) strDro(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(3)
                If(strGau(k) == strHau(il)) strGau(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(2)
                If(strAva(k) == strHau(il)) strAva(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(1)
                If(strArr(k) == strHau(il)) strArr(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(6)
                If(strHau(k) == strHau(il) .and. k/= il) strHau(k) = strRec(ir)
             End Do
             strHau(il) = strRec(ir)
          End If raccordh
       End Do

       Deallocate(strRec)


       !-------------------------------------------------------------------
       ! Envoi de ma frontiere haut vers le haut et reception venant du bas
       !-------------------------------------------------------------------

       sendID = voisin(6)
       recvID = voisin(5)
       Allocate (strRec(nflagrecv(5)))

       Call Mpi_ISend(strHau,nflagloc(6), MPI_PRI,sendID,sendID,MPICube,mpireqs1,mpierr)
       Call Mpi_IRecv(strRec,nflagrecv(5),MPI_PRI,recvID,procID,MPICube,mpireqr1,mpierr)
       Call Mpi_Wait(mpireqs1,mpistat,mpierr)
       Call Mpi_Wait(mpireqr1,mpistat,mpierr)

       Do ib = 1, nbridgebas
          il = bridgeBas(1,ib)
          ir = bridgeBas(2,ib)

          raccordb : If(strRec(ir)< strBas(il) ) Then
             
             nopermut = .false.
             renumallb : Do k = 1,mynpart
                If(structure(k) == strBas(il)) structure(k) = strRec(ir)
             End Do renumallb
             Do k=1, nflagloc(4)
                If(strDro(k) == strBas(il)) strDro(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(3)
                If(strGau(k) == strBas(il)) strGau(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(2)
                If(strAva(k) == strBas(il)) strAva(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(1)
                If(strArr(k) == strBas(il)) strArr(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(5)
                If(strBas(k) == strBas(il) .and. k/= il) strBas(k) = strRec(ir)
             End Do
             strBas(il) = strRec(ir)
          End If raccordb
       End Do

       Deallocate(strRec)


       !--------------------------------------------------------------------------
       ! Envoi de ma frontiere droite vers la droite et reception venant de gauche
       !--------------------------------------------------------------------------

       sendID = voisin(4)
       recvID = voisin(3)

       Allocate (strRec(nflagrecv(3)))

       Call Mpi_ISend(strDro,nflagloc(4), MPI_PRI,sendID,sendID,MPICube,mpireqs1,mpierr)
       Call Mpi_IRecv(strRec,nflagrecv(3),MPI_PRI,recvID,procID,MPICube,mpireqr1,mpierr)
       Call Mpi_Wait(mpireqs1,mpistat,mpierr)
       Call Mpi_Wait(mpireqr1,mpistat,mpierr)

       ! comparaison des part. proche de ma face 'gauche' avec les part. venant de mon voisin de gauche
       Do ib = 1, nbridgegau
          il = bridgeGau(1,ib)
          ir = bridgeGau(2,ib)
      
          raccordg : If(strRec(ir)< strGau(il) ) Then

             nopermut = .false.
             renumallg : Do k = 1,mynpart
                If(structure(k) == strGau(il)) structure(k) = strRec(ir)
             End Do renumallg
             Do k=1, nflagloc(5)
                If(strBas(k) == strGau(il)) strBas(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(3)
                If(strGau(k) == strGau(il) .and. k/= il) strGau(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(2)
                If(strAva(k) == strGau(il)) strAva(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(1)
                If(strArr(k) == strGau(il)) strArr(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(6)
                If(strHau(k) == strGau(il)) strHau(k) = strRec(ir)
             End Do
             strGau(il) = strRec(ir)
          End If raccordg
       End Do

       Deallocate(strRec)


       !---------------------------------------------------------------------
       ! Envoi de ma face gauche vers la gauche et reception venant de droite
       !---------------------------------------------------------------------

       sendID = voisin(3)
       recvID = voisin(4)

       Allocate (strRec(nflagrecv(4)))

       Call Mpi_ISend(strGau,nflagloc(3), MPI_PRI,sendID,sendID,MPICube,mpireqs1,mpierr)
       Call Mpi_IRecv(strRec,nflagrecv(4),MPI_PRI,recvID,procID,MPICube,mpireqr1,mpierr)
       Call Mpi_Wait(mpireqs1,mpistat,mpierr)
       Call Mpi_Wait(mpireqr1,mpistat,mpierr)

       ! comparaison des part. proche de ma face 'droite' avec les part. venant de mon voisin de droite
       Do ib = 1, nbridgedro
          il = bridgeDro(1,ib)
          ir = bridgeDro(2,ib)
      
          raccordd : If(strRec(ir)< strDro(il) ) Then

             nopermut = .false.
             renumalld : Do k = 1,mynpart
                If(structure(k) == strDro(il)) structure(k) = strRec(ir)
             End Do renumalld
             Do k=1, nflagloc(4)
                If(strDro(k) == strDro(il) .and. k/= il) strDro(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(5)
                If(strBas(k) == strDro(il)) strBas(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(2)
                If(strAva(k) == strDro(il)) strAva(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(1)
                If(strArr(k) == strDro(il)) strArr(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(6)
                If(strHau(k) == strDro(il)) strHau(k) = strRec(ir)
             End Do
             strDro(il) = strRec(ir)
          End If raccordd
       End Do
    
       Deallocate(strRec)


       !--------------------------------------------------------------------------
       ! Envoi de ma frontiere avant vers l'avant et reception venant de l'arriere
       !--------------------------------------------------------------------------

       sendID = voisin(2)
       recvID = voisin(1)
       
       Allocate (strRec(nflagrecv(1)))


       Call Mpi_ISend(strAva,nflagloc(2), MPI_PRI,sendID,sendID,MPICube,mpireqs1,mpierr)
       Call Mpi_IRecv(strRec,nflagrecv(1),MPI_PRI,recvID,procID,MPICube,mpireqr1,mpierr)
       Call Mpi_Wait(mpireqs1,mpistat,mpierr)
       Call Mpi_Wait(mpireqr1,mpistat,mpierr)

       ! comparaison des part. proche de ma face 'arriere' avec les part. venant de mon voisin de l'arriere
       Do ib = 1, nbridgearr
          il = bridgeArr(1,ib)
          ir = bridgeArr(2,ib)

          raccordr : If(strRec(ir)< strArr(il) ) Then

             nopermut = .false.
             renumallr : Do k = 1,mynpart
                If(structure(k) == strArr(il)) structure(k) = strRec(ir)
             End Do renumallr
             Do k=1, nflagloc(5)
                If(strBas(k) == strArr(il)) strBas(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(3)
                If(strGau(k) == strArr(il)) strGau(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(4)
                If(strDro(k) == strArr(il)) strDro(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(1)
                If(strArr(k) == strArr(il) .and. k/= il) strArr(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(6)
                If(strHau(k) == strArr(il)) strHau(k) = strRec(ir)
             End Do
             strArr(il) = strRec(ir)
          End If raccordr
       End Do

       Deallocate(strRec)


       !---------------------------------------------------------------------
       ! Envoi de ma face arriere vers l'arriere et reception venant de l'avant
       !---------------------------------------------------------------------

       sendID = voisin(1)
       recvID = voisin(2)

       Allocate (strRec(nflagrecv(2)))


       Call Mpi_ISend(strArr,nflagloc(1), MPI_PRI,sendID,sendID,MPICube,mpireqs1,mpierr)
       Call Mpi_IRecv(strRec,nflagrecv(2),MPI_PRI,recvID,procID,MPICube,mpireqr1,mpierr)
       Call Mpi_Wait(mpireqs1,mpistat,mpierr)
       Call Mpi_Wait(mpireqr1,mpistat,mpierr)

       ! comparaison des part. proche de ma face 'avant' avec les part. venant de mon voisin de l'avant
       Do ib = 1, nbridgeava
          il = bridgeAva(1,ib)
          ir = bridgeAva(2,ib)

          raccorda : If(strRec(ir)< strAva(il) ) Then

             nopermut = .false.
             renumalla : Do k = 1,mynpart
                If(structure(k) == strAva(il)) structure(k) = strRec(ir)
             End Do renumalla
             Do k=1, nflagloc(4)
                If(strDro(k) == strAva(il)) strDro(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(5)
                If(strBas(k) == strAva(il)) strBas(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(2)
                If(strAva(k) == strAva(il) .and. k/= il) strAva(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(3)
                If(strGau(k) == strAva(il)) strGau(k) = strRec(ir)
             End Do
             Do k=1, nflagloc(6)
                If(strHau(k) == strAva(il)) strHau(k) = strRec(ir)
             End Do
             strAva(il) = strRec(ir)
          End If raccorda
       End Do

       Deallocate(strRec)

       Call Mpi_AllReduce(nopermut,finished,1,Mpi_Logical,Mpi_Land,MPICube,mpierr)
       If(procID==0) Print *,'permutations terminees'
       If(finished) Exit
       
    End Do raccordement

    If(Allocated(strHau)) Deallocate(strHau)
    If(Allocated(strBas)) Deallocate(strBas)
    If(Allocated(strDro)) Deallocate(strDro)
    If(Allocated(strGau)) Deallocate(strGau)
    If(Allocated(strAva)) Deallocate(strAva)
    If(Allocated(strArr)) Deallocate(strArr) 


  End Subroutine mergehaloes


End Module modfofmpi
