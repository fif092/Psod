!> @file
!!This file contains the serial FOF algorithm. 

!> This module contains the serial FOF algorithm. 
!>
!> Authors: E. Audit, F. Roy, V. Bouillot

Module modfofpara

  Use modmpicom  

Contains

  !> Parallel FOF subroutine
  !! Finds haloes on each process then apply the merging process for haloes that extend across several processes.
  Subroutine fofpara()
    ! Halo detection is performed locally in each subdomains (by each process).
    ! Structures which are cut by a border between two subdomains are gathered.
    ! The criterium to gather two parts of a halo is simple: if one particle from in a halo is seperated from a particle in 
    ! another halo (on the other side of a border) by a distance smaller than the percolation parameter, then these two halos 
    ! are two parts of a single halo.


    Use modfofmpi, only : mergehaloes, border, nflagloc
    Use modparameters
    Use modhalo
    Use modio
    Use modwritehalo
    Use modtiming
    Use modsort
    Use modvariables

    Implicit none

    ! Local variables
    Integer(kind=4), dimension(:),allocatable :: adfirst,npcase
    Integer(kind=4), dimension(:), allocatable :: lamas, pile, indl
    Integer(kind=4) :: i

    Integer(kind=4) :: index, ipart
    Integer(kind=4) :: ipermut, sttmp, ind, ipile, ipilepr
    Integer(kind=4) :: ix, iy, iz, ic
    Integer(kind=4) :: i1, i2, i3, j1, j2, j3
    Integer(kind=4) :: nbborderloc, nbborder
    Integer(kind=4) :: ngrid_fof,res_fof
    Integer(kind=4) :: refine_fof
    Integer(kind=4) :: signx(3), signy(3), signz(3)
    Integer(kind=4) :: nsign
    
    Integer(kind=PRI) :: namas      ! tmp structure ID

    Real(kind=4) :: r, d, size, size_fof, xx, yy, zz
    Real(kind=4) :: dx, dy, dz
    Real(kind=4) :: r2
    Real(kind=4) :: rT

    Real(kind=8) :: ttmp0, ttmp1

    ! INITIALIZATION

    ! Initialize timings if necessary
    If(dotimings) Then
       time0 = Mpi_Wtime()
    End If

    nflagloc = 0
    nbborderloc = 0

    ! we used a grid fof FoF
    ! this grid is more refined than the coarse grid used for the dynamic evolution
    ! the refinement factor is set to 2
    refine_fof = 2

    res_fof = refine_fof * nres / dims(1)
    ngrid_fof = res_fof**3 
    size = float(nres)
    size_fof = refine_fof * size

    Allocate(adfirst(ngrid_fof),npcase(ngrid_fof))

    Allocate(border(mynpart), lamas(mynpart), indl(mynpart), pile(mynpart), structure(mynpart))

    Call init(res_fof,mynpart,ngrid_fof,x,pile,adfirst,npcase,xmin,ymin,zmin,size_fof)

    nsign = 2
    If( perco*refine_fof >= 0.5 ) Then
       nsign = 3
    End If

    If( perco*refine_fof >= 1 ) Then 
       If(procID == 0) Then
          Print *, ' ' 
          Print *, '*********************************************************************************'
          Print *, '*** perco * refine_fof should be < 1                                          ***'
          Print *, '*** refine_fof is set and used in modfofpara.f90, perco is an input parameter ***'
          Print *, '*** Pfof is exiting                                                           ***'
          Print *, '*********************************************************************************'
          Print *, ' ' 
       End If
       Call Mpi_Barrier(Mpi_Comm_World, mpierr)
       Call Mpi_Abort(Mpi_Comm_World, 2, mpierr)
    End If

    r = perco
    rT = r / size
    r2 = rT*rT

    Do i = 1, mynpart
       lamas(i) = i
       indl(i)  = i
    End Do

!!!namas = id(1)
    if(mynpart> 0) then
       namas = id(1) !!!!!RY
    else
       namas=0
    endif
    ipermut  = 2

    border = 0

    If(dotimings) Then
       Call Mpi_Barrier(Mpi_Comm_World,mpierr)
       timeInt = Mpi_Wtime()
       tFoFinit = timeInt - time0
    End If

    If(procID==0) Print *,'Debut de FOF Local'

    !-----------!
    ! Local Friends of Friends
    !-----------!

    signx(1) = 0
    signy(1) = 0
    signz(1) = 0
    signx(3) = 1
    signy(3) = 1
    signz(3) = 1

    particules : Do i=1, mynpart

       If(procID==0 .and. mod(i,100000)==0) Print *,'Particule num.',i
       ipart = lamas(i)

       If (x(1,ipart) == 1.0) x(1,ipart) = 0.00000
       If (x(2,ipart) == 1.0) x(2,ipart) = 0.00000
       If (x(3,ipart) == 1.0) x(3,ipart) = 0.00000


       If(abs(x(1,ipart)-xmin) <= rT ) Then
          border(ipart) = border(ipart) + 4_1
          nflagloc(1) = nflagloc(1) + 1          
       End If
       If(abs(x(1,ipart)-xmax) <= rT ) Then
          border(ipart) = border(ipart) + 8_1
          nflagloc(2) = nflagloc(2) + 1
       End If
       If(abs(x(2,ipart)-ymin) <= rT ) Then
          border(ipart) = border(ipart) + 1_1
          nflagloc(3) = nflagloc(3) + 1
       End If
       If(abs(x(2,ipart)-ymax) <= rT ) Then
          border(ipart) = border(ipart) + 2_1
          nflagloc(4) = nflagloc(4) + 1
       End If
       If(abs(x(3,ipart)-zmin) <= rT ) Then
          border(ipart) = border(ipart) + 16_1
          nflagloc(5) = nflagloc(5) + 1
       End If
       If(abs(x(3,ipart)-zmax) <= rT ) Then
          border(ipart) = border(ipart) + 32_1
          nflagloc(6) = nflagloc(6) + 1
       End If
       If(border(ipart) /= 0 ) nbborderloc = nbborderloc + 1

       xx = x(1,ipart)
       yy = x(2,ipart)
       zz = x(3,ipart)

       ix = int((x(1,ipart)-xmin)*size_fof)
       iy = int((x(2,ipart)-ymin)*size_fof)
       iz = int((x(3,ipart)-zmin)*size_fof)

       signx(2) = -1
       signy(2) = -1
       signz(2) = -1
       If(nsign == 2) Then
          If( (x(1,ipart)-xmin)*size_fof - ix > 0.5 ) Then
             signx(2) = 1
          End If
          If( (x(2,ipart)-ymin)*size_fof - iy > 0.5 ) Then
             signy(2) = 1
          End If
          If( (x(3,ipart)-zmin)*size_fof - iz > 0.5 ) Then
             signz(2) = 1
          End If
       End If
       structure(ipart) = namas

       ! nsign depends on perco * refine_fof: see above
       dimx : Do i1 = 1, nsign
          j1 = ix + signx(i1)
          If( (j1>= res_fof) .Or. (j1 < 0) ) Cycle

          dimy : Do i2 = 1, nsign
             j2 = iy + signy(i2)
             If( (j2>= res_fof) .Or. (j2 < 0) ) Cycle

             dimz : Do i3 = 1, nsign
                j3 = iz + signz(i3)
                If( (j3>= res_fof) .Or. (j3 < 0) ) Cycle

                index = 1 + j1 + j2*res_fof + j3*res_fof*res_fof
                ic = 0

                nonvide : If (npcase(index) >= 1) Then  
                   ipile   = adfirst(index)
                   ipilepr = adfirst(index)
                   feuille : Do ind = 1,npcase(index)
                      nonself : If (ipart /= ipile) Then
                         dx = abs(xx-x(1,ipile))
                         dy = abs(yy-x(2,ipile))
                         dz = abs(zz-x(3,ipile))

                         d  = dx*dx+dy*dy+dz*dz

                         inhalo : If(d <= r2) Then
                            sttmp              = lamas(ipermut)
                            lamas(ipermut)     = ipile
                            lamas(indl(ipile)) = sttmp
                            indl(sttmp)        = indl(ipile)
                            indl(ipile)        = ipermut
                            ipermut            = ipermut+1
                            isfirst : If(ipile == adfirst(index))Then
                               adfirst(index) = pile(ipile)
                               ipilepr        = pile(ipile)
                            Else
                               pile(ipilepr)=pile(ipile)
                            End If isfirst
                            ic = ic + 1
                         Else
                            ipilepr = ipile
                         End If inhalo
                      Else
                         isfirst2 : If(ipile == adfirst(index))Then
                            adfirst(index) = pile(ipile)
                            ipilepr        = pile(ipile)
                         Else
                            pile(ipilepr) = pile(ipile)
                         End If isfirst2
                         ic = ic + 1
                      End If nonself
                      ipile = pile(ipile)
                   End Do feuille
                End If nonvide
                npcase(index) = npcase(index) - ic
             End Do dimz
          End Do dimy
       End Do dimx

       !-----------------------------------------------!
       ! Si l'amas est fini, on passe a l'amas suivant !
       !-----------------------------------------------!

       If (ipermut == (i+1)) Then

          ipermut  = ipermut + 1
          If(i<mynpart) namas = id(lamas(i+1))
       End If

    End Do particules

    If(procID==0) Print *,'FoF local termine'

    If(dotimings) Then
       Print *,'Process ',procID,' termine apres ',Mpi_Wtime()-timeInt,'s dans fof local.'
    End If

    Deallocate(lamas,pile,indl)
    Deallocate(adfirst,npcase)

    ! call writememfilestep(1, 0, 2, 0, ' After fof local ', 'memall.txt',974, 0.0, 0.0)

    !-------------------!
    ! FOF local termine !
    !-------------------!

    Call Mpi_Reduce(nbborderloc, nbborder, 1, Mpi_Integer,Mpi_Sum,0,Mpi_Comm_World,mpierr)


    tFoFloc = Mpi_Wtime() - timeInt
    timeInt = Mpi_Wtime()

    If(procID==0) Print *,'Initialisation du raccordement'

    !! Call the merging procedure with the r**2 as an argument
    Call mergehaloes(r2)

    If(dotimings) Then
       Call Mpi_Barrier(Mpi_Comm_World,mpierr)
       tRaccord = Mpi_Wtime() - timeInt
       timeInt = Mpi_Wtime()
    End If

    If(procID==0) Print *,'Fin du raccordement'

    ! call writememfilestep(1, 0, 2, 0, ' End of the raccordement ', 'memall.txt',974, 0.0, 0.0)
    !---------------------!
    ! FIN du raccordement !
    !---------------------!

    If(procID==0) Print *,'Debut du calcul de la masse et de la position du cdm des stuctures'

    Call gatherhaloes()

    !!Call trirapide(1,myNpartW,stf,idf,xf,vf)
    Call tritas(stf,idf,xf,vf,myfinalnpart)

    If(dotimings) Then
       ttmp1 = Mpi_Wtime()
       Print *,'Process ',procID,' sort :', ttmp1-ttmp0
    End If

    !! select haloes with mass > Mmin
    Call selecthaloes()

#ifdef WITHHDF5
    If(usehdf5) Then
       Call h5writehalopart(haloNB, halopartNB, haloMass, haloID, halopartPos, halopartVel, halopartID, MpiCube)
    Else
       Call writehalopart(haloNB, halopartNB, haloMass, halopartPos, halopartVel, halopartID)
    End If
#else
    Call writehalopart(haloNB, halopartNB, haloMass, halopartPos, halopartVel, halopartID)
#endif

    
    Deallocate(halopartID)

    !! compute position and velocity of the center of mass for each halo
    Call computecom()

    Call computeradius()

    If(dotimings) Then
       Print *,'Process ',procID,' termine apres ',Mpi_Wtime()-timeInt,' s dans calcul des observables'
    End If


    If(procID==0) Print *,'Fin du calcul de la masse et des centres de masse des structures'
    If(procID==0) Print *,'Nombre de halos de masse superieure a', Mmin,':',haloNB_all
    If(procID==0) Write(Ulog,*) 'Nombre de halos de masse superieure a', Mmin,':',haloNB_all

    If(dotimings) Then
       Call Mpi_Barrier(Mpi_Comm_World,mpierr)
       tObs = Mpi_Wtime() - timeInt
       timeInt = Mpi_Wtime()
    End If

#ifdef WITHHDF5
    If(usehdf5) Then
       Call mpih5writehalomass(haloNB_all, haloNB, haloMass, halocomPos, halocomVel, haloID, haloRadius, haloSubHaloNB, MpiCube)
    Else
       Call writehalomass(haloNB, haloMass, halocomPos, haloID)
    End If
#else
    Call writehalomass(haloNB, haloMass, halocomPos, haloID)
#endif

    Deallocate(haloMass, halocomPos, halocomVel, haloID)

    If(dotimings) Then
       Call Mpi_Barrier(Mpi_Comm_World,mpierr)
       tOut = Mpi_Wtime() - timeInt
       tFoF = Mpi_Wtime() - time0
    End If


  End Subroutine fofpara


  ! ======================================================================
  !> Initialize the stacks of pointers for local friends of friends.<br>
  !! The whole domain is divided into t^3 cubes, where t is the resolution of the simulation analized times the refine_fof factor.<br>
  !! Each process will implicitly considere only its subdomains because every particles treated by the process is located
  !! in the same subdomain.<br>
  !! This routine initializes one stack of "pointers" to the index of the particles located in each cube.
  Subroutine init(n,np,ngpp,x,pile,adfirst,npcase,xmin,ymin,zmin,t)

    Implicit none

    ! Input parameters
    Integer(kind=4), Intent(in) :: n                   !< number of "cube" in each dimension in a subdomain, i.e. there are
                                                       !! n^3 cubes in a subdomain
    Integer(kind=4), Intent(in) :: np                  !< number of particles in the subdomain
    Integer(kind=4), Intent(in) :: ngpp                !< number of "FOF" cubes in the subdomain
    Real(kind=4), dimension(3,np), Intent(in)   :: x   !< positions of the particles
    Real(kind=4), Intent(in) :: xmin,ymin,zmin         !< minimum x,y and z of the subdomain
    Real(kind=4), Intent(in) :: t                      !< resolution of the cosmological simulation times refine_fof factor

    ! Output parameters
    Integer(kind=4), dimension(ngpp), Intent(out) :: npcase    !< number of particles in each cube
    Integer(kind=4), dimension(ngpp), Intent(out) :: adfirst   !< index of the first particle to examine in the cube
    Integer(kind=4), dimension(np), Intent(out) :: pile        !< stack of indices

    ! Local variables
    Integer(kind=4), dimension(:), allocatable :: adlast          ! index of last particle "added" to a cube
    Integer(kind=4) :: ipart, icase, ix, iy, iz         ! temporary indices
    Real(kind=4) :: xx, yy, zz                         ! temporary position

    ! Initialization

    Allocate(adlast(ngpp))

    pile = 0
    adfirst = 0
    adlast = 0
    npcase = 0

    ! loop over the particles
    Do ipart = 1,np
       ! positions scaled to the resolution, i.e. between 0 and 512 for a 512^3 simulation for example
       xx = (x(1,ipart)-xmin)*t
       yy = (x(2,ipart)-ymin)*t
       zz = (x(3,ipart)-zmin)*t
       ! coordinates of the cube containing the particle: this cube is always in the subdomain of the process
       ix = int(xx)
       iy = int(yy)
       iz = int(zz)

       ! there may be some rounding problem because we switch from double precision to simple precision positions
       ! so in case we have som positions = 1.0 we place the particle in the "last" cube
       If(ix == n) ix = ix-1
       If(iy == n) iy = iy-1
       If(iz == n) iz = iz-1

       ! index of the cube
       icase = 1 + ix + iy*n + iz*n*n
       ! is there a bug somewhere with the index?
       If(icase>ngpp .or. icase<=0) Then
          Call EmergencyStop('Probleme in initialization of friends of friends ',2)
       End If
       ! there is one more particle in this cube
       npcase(icase) = npcase(icase) + 1
       ! if this particle is the first added to the cube then
       If(adfirst(icase) == 0) Then
          ! we set the adfirst array to the particle index
          adfirst(icase) = ipart
          ! and the adlast as well because it's the last particle added a this time
          adlast(icase)  = ipart
       Else
          ! else the stack points from the previous particle to this one
          pile(adlast(icase)) = ipart
          ! and we set the adlast array
          adlast(icase) = ipart
       End If

    End Do

    Deallocate(adlast)

  End Subroutine init



End Module modfofpara
