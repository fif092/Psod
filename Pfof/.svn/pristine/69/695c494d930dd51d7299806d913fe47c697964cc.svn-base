Module modiocommons

  Use modconstant
  Use modhdf5
  Use modparameters
  Use modvariables

Contains
  
  !=======================================================================
  Subroutine h5writecommonmetadata(file_id)
    
    Implicit none
    
    Integer(kind=hid_t), intent(in) :: file_id

    Character(len=H5STRLEN) :: groupname
    Character(len=H5STRLEN) :: aname
    Character(len=H5STRLEN) :: adata
    Character(len=H5STRLEN) :: dsetname

    Integer(kind=hid_t) :: gr_id
    Integer(kind=hid_t) :: gr_pfof_id
    Integer(kind=hid_t) :: gr_input_id
    Integer(kind=hid_t) :: gr_fof_id
    Integer(kind=hid_t) :: gr_output_id
    Integer(kind=hid_t) :: gr_ramses_id
    Integer(kind=8) :: npart8
    Integer(kind=4) :: tmpint4

    groupname = 'metadata'
    Call hdf5_open_group(file_id,groupname, gr_id)

    aname = 'created_by'
    adata = 'pfof_hdf5'
    Call hdf5_write_attr(gr_id, aname, adata)

    aname = 'svn_version'
    Call hdf5_write_attr(gr_id, aname, svn_version)

    aname = 'simulation_code'
    adata = 'ramses'
    Call hdf5_write_attr(gr_id, aname,adata)

    aname = 'particle_type'
    adata = 'dark_matter'
    Call hdf5_write_attr(gr_id, aname, adata)

    aname = 'constant_mass'
    tmpint4 = 1
    Call hdf5_write_attr(gr_id, aname, tmpint4)

    aname = 'units'
    adata = 'ramses'
    Call hdf5_write_attr(gr_id, aname, adata) 

    ! Write the number of particles in this simulation as an integer(kind=8) dataset
    dsetname = 'npart_simulation'
    npart8 = int(nres**3, kind=8)
    Call hdf5_write_data(gr_id, dsetname, npart8)

    ! Write nres as an attribute
    aname = 'nres'
    Call hdf5_write_attr(gr_id, aname, nres)


    groupname = 'pfof_parameters'
    Call hdf5_create_group(gr_id, groupname, gr_pfof_id)

    groupname = 'input_parameters'
    Call hdf5_create_group(gr_pfof_id, groupname, gr_input_id)

    aname = 'code_index'
    Call hdf5_write_attr(gr_input_id, aname, code_index)

    aname = 'input_path'
    Call hdf5_write_attr(gr_input_id, aname, input_path)

    aname = 'part_inputfile'
    Call hdf5_write_attr(gr_input_id, aname, part_inputfile)

    aname = 'info_inputfile'
    Call hdf5_write_attr(gr_input_id, aname, info_inputfile)

    aname = 'grpsize'
    Call hdf5_write_attr(gr_input_id, aname, grpsize)

    ! Write potential logical as an integer attribute (1=true, 0=false)
    aname = 'do_read_potential'
    If(do_read_potential) Then
       tmpint4=1
    Else
       tmpint4=0
    End If
    Call hdf5_write_attr(gr_input_id, aname, tmpint4)

    ! Write force logical as an integer attribute (1=true, 0=false)
    aname = 'do_read_gravitational_field'
    If(do_read_force) Then
       tmpint4=1
    Else
       tmpint4=0
    End If
    Call hdf5_write_attr(gr_input_id, aname, tmpint4)

    ! Write force logical as an integer attribute (1=true, 0=false)
    aname = 'do_skip_star'
    If(do_skip_star) Then
       tmpint4=1
    Else
       tmpint4=0
    End If
    Call hdf5_write_attr(gr_input_id, aname, tmpint4)

    ! Write force logical as an integer attribute (1=true, 0=false)
    aname = 'do_skip_metal'
    If(do_skip_metal) Then
       tmpint4=1
    Else
       tmpint4=0
    End If
    Call hdf5_write_attr(gr_input_id, aname, tmpint4)

    aname='do_read_from_cube'
    tmpint4 = 0
    If(do_read_from_cube) tmpint4 = 1
    Call hdf5_write_attr(gr_input_id, aname, tmpint4)

    aname = 'gatherread_factor'
    Call hdf5_write_attr(gr_input_id, aname, gatherread_factor)


    Call hdf5_close_group(gr_input_id)


    groupname = 'fof_parameters'
    Call hdf5_create_group(gr_pfof_id, groupname, gr_fof_id)

    ! Write percolation parameter b as attribute
    aname = 'percolation_length'
    Call hdf5_write_attr(gr_fof_id, aname, percolation_length)

    ! Write minimum halo mass Mmin as attribute
    aname = 'npart_halo_min'
    Call hdf5_write_attr(gr_fof_id, aname, mmin)    

    aname = 'npart_halo_max'
    Call hdf5_write_attr(gr_fof_id, aname, mmax)

    ! Write doUnbinding as attribute (not implemented yet) 
    aname = 'do_fof'
    If(do_fof) Then
       tmpint4=1
    Else
       tmpint4=0
    End If
    Call hdf5_write_attr(gr_fof_id, aname, tmpint4)

    ! Write doUnbinding as attribute (not implemented yet) 
    aname = 'do_unbinding'
    If(do_unbinding) Then
       tmpint4=1
    Else
       tmpint4=0
    End If
    Call hdf5_write_attr(gr_fof_id, aname, tmpint4)

    ! Write doSubHalo as attribute (not implemented yet) 
    aname = 'do_subhalo'
    If(do_subhalo) Then
       tmpint4=1
    Else
       tmpint4=0
    End If
    Call hdf5_write_attr(gr_fof_id, aname, tmpint4)

    Call hdf5_close_group(gr_fof_id)



    groupname = 'output_parameters'
    Call hdf5_create_group(gr_pfof_id, groupname, gr_output_id)

    ! Write the simulation name as attribute
    aname = 'simulation_name'
    Call hdf5_write_attr(gr_output_id, aname, simulation_name)

    ! write the snapshot number: if halo computed from a lightcone then outputNB = -1
    aname = 'snapshot'
    Call hdf5_write_attr(gr_output_id, aname, snapshot)

    tmpint4 = 0
    If(do_write_cube) tmpint4 = 1
    aname = 'do_write_cube'
    Call hdf5_write_attr(gr_output_id, aname, tmpint4)

    tmpint4 = 0
    If(do_sort_cube) tmpint4 = 1
    aname = 'do_sort_cube'
    Call hdf5_write_attr(gr_output_id, aname, tmpint4)
    
    aname = 'gatherwrite_factor'
    Call hdf5_write_attr(gr_output_id, aname, gatherwrite_factor)

    Call hdf5_close_group(gr_output_id)

    Call hdf5_close_group(gr_pfof_id)



    ! Ramses Info Metadata
    groupname = 'ramses_info'
    Call hdf5_create_group(gr_id,groupname,gr_ramses_id)

    aname = 'nproc'
    Call hdf5_write_attr(gr_ramses_id,aname,nproc)

    aname = 'ndim'
    Call hdf5_write_attr(gr_ramses_id,aname,ndim)

    aname = 'lmin'
    Call hdf5_write_attr(gr_ramses_id,aname,lmin)

    aname = 'lmax'
    Call hdf5_write_attr(gr_ramses_id,aname,lmax)

    aname = 'ngridmax'
    Call hdf5_write_attr(gr_ramses_id,aname,ngridmax)

    aname = 'nstep_coarse'
    Call hdf5_write_attr(gr_ramses_id,aname,nstep_coarse)

    aname = 'boxlen'
    Call hdf5_write_attr(gr_ramses_id,aname,boxlen)

    aname = 'time'
    Call hdf5_write_attr(gr_ramses_id,aname,time)

    aname = 'aexp'
    Call hdf5_write_attr(gr_ramses_id,aname,aexp)

    aname = 'h0'
    Call hdf5_write_attr(gr_ramses_id,aname,h0)

    aname = 'omega_m'
    Call hdf5_write_attr(gr_ramses_id,aname,omega_m)
    
    aname = 'omega_l'
    Call hdf5_write_attr(gr_ramses_id,aname,omega_l)

    aname = 'omega_k'
    Call hdf5_write_attr(gr_ramses_id,aname,omega_k)

    aname = 'omega_b'
    Call hdf5_write_attr(gr_ramses_id,aname,omega_b)

    aname = 'unit_l'
    Call hdf5_write_attr(gr_ramses_id,aname,unit_l)

    aname = 'unit_d'
    Call hdf5_write_attr(gr_ramses_id,aname,unit_d)

    aname = 'unit_t'
    Call hdf5_write_attr(gr_ramses_id,aname,unit_t)

    Call hdf5_close_group(gr_ramses_id)

    Call hdf5_close_group(gr_id)

  End Subroutine h5writecommonmetadata


  !=======================================================================
  Subroutine h5readcommonmetadata(file_id)
    
    Implicit none
    
    Integer(kind=hid_t), intent(in) :: file_id

    Character(len=H5STRLEN) :: groupname
    Character(len=H5STRLEN) :: aname
    Character(len=H5STRLEN) :: dsetname

    Integer(kind=hid_t) :: gr_id
    Integer(kind=hid_t) :: gr_ramses_id
    Integer(kind=8) :: npart8
    Integer(kind=4) :: tmpint4

    groupname = 'metadata'
    Call hdf5_open_group(file_id,groupname, gr_id)

!!$    aname = 'created_by'
!!$!    adata = 'pfof'
!!$    Call hdf5_read_attr(gr_id, aname,len(), adata)

!!$    aname = 'particle_type'
!!$!    adata = 'dark_matter'
!!$    Call hdf5_read_attr(gr_id, aname, adata)

    aname = 'constant_mass'
    tmpint4 = 1
    Call hdf5_read_attr(gr_id, aname, tmpint4)

!!$    aname = 'units'
!!$    adata = 'ramses'
!!$    Call hdf5_read_attr(gr_id, aname, adata) 

    ! Read the number of particles in this simulation as an integer(kind=8) dataset
    dsetname = 'npart_simulation'
    npart8 = int(nres**3, kind=8)
    Call hdf5_read_data(gr_id, dsetname, npart8)

    ! Read nres as an attribute
    aname = 'nres'
    Call hdf5_read_attr(gr_id, aname, nres)


!!$    groupname = 'pfof_parameters'
!!$    Call hdf5_create_group(gr_id, groupname, gr_pfof_id)
!!$
!!$
!!$    groupname = 'input_parameters'
!!$    Call hdf5_create_group(gr_pfof_id, groupname, gr_input_id)
!!$
!!$    aname = 'code_index'
!!$    Call hdf5_read_attr(gr_input_id, aname, code_index)
!!$
!!$    aname = 'input_path'
!!$    Call hdf5_read_attr(gr_input_id, aname, input_path)
!!$
!!$    aname = 'part_inputfile'
!!$    Call hdf5_read_attr(gr_input_id, aname, part_inputfile)
!!$
!!$    aname = 'info_inputfile'
!!$    Call hdf5_read_attr(gr_input_id, aname, info_inputfile)
!!$
!!$    aname = 'grpsize'
!!$    Call hdf5_read_attr(gr_input_id, aname, grpsize)
!!$
!!$    aname = 'gatherread_factor'
!!$    Call hdf5_read_attr(gr_input_id, aname, gatherread_factor)
!!$
!!$    ! Read potential logical as an integer attribute (1=true, 0=false)
!!$    aname = 'do_read_potential'
!!$    If(do_read_potential) Then
!!$       tmpint4=1
!!$    Else
!!$       tmpint4=0
!!$    End If
!!$    Call hdf5_read_attr(gr_input_id, aname, tmpint4)
!!$
!!$    ! Read force logical as an integer attribute (1=true, 0=false)
!!$    aname = 'do_read_gravitational_field'
!!$    If(do_read_force) Then
!!$       tmpint4=1
!!$    Else
!!$       tmpint4=0
!!$    End If
!!$    Call hdf5_read_attr(gr_input_id, aname, tmpint4)
!!$
!!$    ! Read force logical as an integer attribute (1=true, 0=false)
!!$    aname = 'do_skip_star'
!!$    If(do_skip_star) Then
!!$       tmpint4=1
!!$    Else
!!$       tmpint4=0
!!$    End If
!!$    Call hdf5_read_attr(gr_input_id, aname, tmpint4)
!!$
!!$    ! Read force logical as an integer attribute (1=true, 0=false)
!!$    aname = 'do_skip_metal'
!!$    If(do_skip_metal) Then
!!$       tmpint4=1
!!$    Else
!!$       tmpint4=0
!!$    End If
!!$    Call hdf5_read_attr(gr_input_id, aname, tmpint4)
!!$
!!$    Call hdf5_close_group(gr_input_id)
!!$
!!$
!!$
!!$    groupname = 'fof_parameters'
!!$    Call hdf5_create_group(gr_pfof_id, groupname, gr_fof_id)
!!$
!!$    ! Read percolation parameter b as attribute
!!$    aname = 'percolation_length'
!!$    Call hdf5_read_attr(gr_fof_id, aname, percolation_length)
!!$
!!$    ! Read minimum halo mass Mmin as attribute
!!$    aname = 'npart_halo_min'
!!$    Call hdf5_read_attr(gr_fof_id, aname, mmin)    
!!$
!!$    aname = 'npart_halo_max'
!!$    Call hdf5_read_attr(gr_fof_id, aname, mmax)
!!$
!!$    ! Read doUnbinding as attribute (not implemented yet) 
!!$    aname = 'do_fof'
!!$    If(do_fof) Then
!!$       tmpint4=1
!!$    Else
!!$       tmpint4=0
!!$    End If
!!$    Call hdf5_read_attr(gr_fof_id, aname, tmpint4)
!!$
!!$    ! Read doUnbinding as attribute (not implemented yet) 
!!$    aname = 'do_unbinding'
!!$    If(do_unbinding) Then
!!$       tmpint4=1
!!$    Else
!!$       tmpint4=0
!!$    End If
!!$    Call hdf5_read_attr(gr_fof_id, aname, tmpint4)
!!$
!!$    ! Read doSubHalo as attribute (not implemented yet) 
!!$    aname = 'do_subhalo'
!!$    If(do_subhalo) Then
!!$       tmpint4=1
!!$    Else
!!$       tmpint4=0
!!$    End If
!!$    Call hdf5_read_attr(gr_fof_id, aname, tmpint4)
!!$
!!$    Call hdf5_close_group(gr_fof_id)
!!$
!!$
!!$
!!$    groupname = 'output_parameters'
!!$    Call hdf5_create_group(gr_pfof_id, groupname, gr_output_id)
!!$
!!$    ! Read the simulation name as attribute
!!$    aname = 'simulation_name'
!!$    Call hdf5_read_attr(gr_output_id, aname, simulation_name)
!!$
!!$    ! read the snapshot number: if halo computed from a lightcone then outputNB = -1
!!$    aname = 'snapshot'
!!$    Call hdf5_read_attr(gr_output_id, aname, snapshot)
!!$
!!$    tmpint4 = 0
!!$    If(do_read_cube) tmpint4 = 1
!!$    aname = 'do_read_cube'
!!$    Call hdf5_read_attr(gr_output_id, aname, tmpint4)
!!$
!!$    tmpint4 = 0
!!$    If(do_sort_cube) tmpint4 = 1
!!$    aname = 'do_sort_cube'
!!$    Call hdf5_read_attr(gr_output_id, aname, tmpint4)
!!$    
!!$    aname = 'gatherread_factor'
!!$    Call hdf5_read_attr(gr_output_id, aname, gatherread_factor)
!!$
!!$    Call hdf5_close_group(gr_output_id)
!!$
!!$    Call hdf5_close_group(gr_pfof_id)
!!$


    ! Ramses Info Metadata
    groupname = 'ramses_info'
    Call hdf5_open_group(gr_id,groupname,gr_ramses_id)

    aname = 'nproc'
    Call hdf5_read_attr(gr_ramses_id,aname,nproc)

    aname = 'ndim'
    Call hdf5_read_attr(gr_ramses_id,aname,ndim)

    aname = 'lmin'
    Call hdf5_read_attr(gr_ramses_id,aname,lmin)

    aname = 'lmax'
    Call hdf5_read_attr(gr_ramses_id,aname,lmax)

    aname = 'ngridmax'
    Call hdf5_read_attr(gr_ramses_id,aname,ngridmax)

    aname = 'nstep_coarse'
    Call hdf5_read_attr(gr_ramses_id,aname,nstep_coarse)

    aname = 'boxlen'
    Call hdf5_read_attr(gr_ramses_id,aname,boxlen)

    aname = 'time'
    Call hdf5_read_attr(gr_ramses_id,aname,time)

    aname = 'aexp'
    Call hdf5_read_attr(gr_ramses_id,aname,aexp)

    aname = 'h0'
    Call hdf5_read_attr(gr_ramses_id,aname,h0)

    aname = 'omega_m'
    Call hdf5_read_attr(gr_ramses_id,aname,omega_m)
    
    aname = 'omega_l'
    Call hdf5_read_attr(gr_ramses_id,aname,omega_l)

    aname = 'omega_k'
    Call hdf5_read_attr(gr_ramses_id,aname,omega_k)

    aname = 'omega_b'
    Call hdf5_read_attr(gr_ramses_id,aname,omega_b)

    aname = 'unit_l'
    Call hdf5_read_attr(gr_ramses_id,aname,unit_l)

    aname = 'unit_d'
    Call hdf5_read_attr(gr_ramses_id,aname,unit_d)

    aname = 'unit_t'
    Call hdf5_read_attr(gr_ramses_id,aname,unit_t)

    Call hdf5_close_group(gr_ramses_id)

    Call hdf5_close_group(gr_id)

  End Subroutine h5readcommonmetadata

End Module modiocommons
